'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('../request');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents a color object
 */
var Color = exports.Color = function () {
  /**
   * Create a new instance of a color
   * @param {object} [data] API response data.
   * @param {number} [data.color_id=0] The color id. i.e. - 10
   * @param {string} [data.color_name] The color name. i.e. - Dark Gray
   * @param {string} [data.color_code] The HTML HEX associated to the color. i.e. - 6b5a5a
   * @param {string} [data.color_type] A group that the color belongs to. i.e. - Solid, Transparent, etc...
   */
  function Color(data) {
    _classCallCheck(this, Color);

    data = data || {};
    /** @type {number} */
    this.color_id = data.color_id || 0;
    /** @type {string} */
    this.color_name = data.color_name || '';
    /** @type {string} */
    this.color_code = data.color_code || '';
    /** @type {string} */
    this.color_type = data.color_type || '';
  }

  /**
   * Method to get specific color details
   *
   * Usage:
   *
   * ```
   * var req = Color.get(10);
   * client.send(req).then(color => console.log(color));
   * ```
   *
   * @param {number} colorId a color id.
   * @return {Request} A request that resolves to a {@link Color} instance.
   */


  _createClass(Color, null, [{
    key: 'get',
    value: function get(colorId) {
      var method = _request.Request.GET;
      var uri = '/colors/' + colorId;

      return new _request.Request(method, uri, null, function (data) {
        return new Color(data);
      });
    }

    /**
     * Get a list of all colors
     *
     * Usage:
     *
     * ```
     * var req = Color.all();
     * client.send(req).then(colors => console.log(colors));
     * ```
     *
     * @return {Request} A request that resolves to an array of {@link Color}.
     */

  }, {
    key: 'all',
    value: function all() {
      var method = _request.Request.GET;
      var uri = '/colors';

      return new _request.Request(method, uri, null, function (data) {
        return data.map(function (d) {
          return new Color(d);
        });
      });
    }
  }]);

  return Color;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2xvci9jb2xvci5qcyJdLCJuYW1lcyI6WyJDb2xvciIsImRhdGEiLCJjb2xvcl9pZCIsImNvbG9yX25hbWUiLCJjb2xvcl9jb2RlIiwiY29sb3JfdHlwZSIsImNvbG9ySWQiLCJtZXRob2QiLCJHRVQiLCJ1cmkiLCJtYXAiLCJkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztBQUVBOzs7SUFHYUEsSyxXQUFBQSxLO0FBQ1g7Ozs7Ozs7O0FBUUEsaUJBQVlDLElBQVosRUFBa0I7QUFBQTs7QUFDaEJBLFdBQU9BLFFBQVEsRUFBZjtBQUNBO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkQsS0FBS0MsUUFBTCxJQUFpQixDQUFqQztBQUNBO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkYsS0FBS0UsVUFBTCxJQUFtQixFQUFyQztBQUNBO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkgsS0FBS0csVUFBTCxJQUFtQixFQUFyQztBQUNBO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkosS0FBS0ksVUFBTCxJQUFtQixFQUFyQztBQUNEOztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFhV0MsTyxFQUFTO0FBQ2xCLFVBQUlDLFNBQVMsaUJBQVFDLEdBQXJCO0FBQ0EsVUFBSUMsbUJBQWlCSCxPQUFyQjs7QUFFQSxhQUFPLHFCQUFZQyxNQUFaLEVBQW9CRSxHQUFwQixFQUF5QixJQUF6QixFQUErQjtBQUFBLGVBQVEsSUFBSVQsS0FBSixDQUFVQyxJQUFWLENBQVI7QUFBQSxPQUEvQixDQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7OzswQkFZYTtBQUNYLFVBQUlNLFNBQVMsaUJBQVFDLEdBQXJCO0FBQ0EsVUFBSUMsZUFBSjs7QUFFQSxhQUFPLHFCQUFZRixNQUFaLEVBQW9CRSxHQUFwQixFQUF5QixJQUF6QixFQUErQjtBQUFBLGVBQVFSLEtBQUtTLEdBQUwsQ0FBUztBQUFBLGlCQUFLLElBQUlWLEtBQUosQ0FBVVcsQ0FBVixDQUFMO0FBQUEsU0FBVCxDQUFSO0FBQUEsT0FBL0IsQ0FBUDtBQUNEIiwiZmlsZSI6ImNvbG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXF1ZXN0fSBmcm9tICcuLi9yZXF1ZXN0JztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29sb3Igb2JqZWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBDb2xvciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgYSBjb2xvclxuICAgKiBAcGFyYW0ge29iamVjdH0gW2RhdGFdIEFQSSByZXNwb25zZSBkYXRhLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RhdGEuY29sb3JfaWQ9MF0gVGhlIGNvbG9yIGlkLiBpLmUuIC0gMTBcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkYXRhLmNvbG9yX25hbWVdIFRoZSBjb2xvciBuYW1lLiBpLmUuIC0gRGFyayBHcmF5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YS5jb2xvcl9jb2RlXSBUaGUgSFRNTCBIRVggYXNzb2NpYXRlZCB0byB0aGUgY29sb3IuIGkuZS4gLSA2YjVhNWFcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkYXRhLmNvbG9yX3R5cGVdIEEgZ3JvdXAgdGhhdCB0aGUgY29sb3IgYmVsb25ncyB0by4gaS5lLiAtIFNvbGlkLCBUcmFuc3BhcmVudCwgZXRjLi4uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5jb2xvcl9pZCA9IGRhdGEuY29sb3JfaWQgfHwgMDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLmNvbG9yX25hbWUgPSBkYXRhLmNvbG9yX25hbWUgfHwgJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy5jb2xvcl9jb2RlID0gZGF0YS5jb2xvcl9jb2RlIHx8ICcnO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuY29sb3JfdHlwZSA9IGRhdGEuY29sb3JfdHlwZSB8fCAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gZ2V0IHNwZWNpZmljIGNvbG9yIGRldGFpbHNcbiAgICpcbiAgICogVXNhZ2U6XG4gICAqXG4gICAqIGBgYFxuICAgKiB2YXIgcmVxID0gQ29sb3IuZ2V0KDEwKTtcbiAgICogY2xpZW50LnNlbmQocmVxKS50aGVuKGNvbG9yID0+IGNvbnNvbGUubG9nKGNvbG9yKSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sb3JJZCBhIGNvbG9yIGlkLlxuICAgKiBAcmV0dXJuIHtSZXF1ZXN0fSBBIHJlcXVlc3QgdGhhdCByZXNvbHZlcyB0byBhIHtAbGluayBDb2xvcn0gaW5zdGFuY2UuXG4gICAqL1xuICBzdGF0aWMgZ2V0KGNvbG9ySWQpIHtcbiAgICBsZXQgbWV0aG9kID0gUmVxdWVzdC5HRVQ7XG4gICAgbGV0IHVyaSA9IGAvY29sb3JzLyR7Y29sb3JJZH1gO1xuXG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KG1ldGhvZCwgdXJpLCBudWxsLCBkYXRhID0+IG5ldyBDb2xvcihkYXRhKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgY29sb3JzXG4gICAqXG4gICAqIFVzYWdlOlxuICAgKlxuICAgKiBgYGBcbiAgICogdmFyIHJlcSA9IENvbG9yLmFsbCgpO1xuICAgKiBjbGllbnQuc2VuZChyZXEpLnRoZW4oY29sb3JzID0+IGNvbnNvbGUubG9nKGNvbG9ycykpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7UmVxdWVzdH0gQSByZXF1ZXN0IHRoYXQgcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2Yge0BsaW5rIENvbG9yfS5cbiAgICovXG4gIHN0YXRpYyBhbGwoKSB7XG4gICAgbGV0IG1ldGhvZCA9IFJlcXVlc3QuR0VUO1xuICAgIGxldCB1cmkgPSBgL2NvbG9yc2A7XG5cbiAgICByZXR1cm4gbmV3IFJlcXVlc3QobWV0aG9kLCB1cmksIG51bGwsIGRhdGEgPT4gZGF0YS5tYXAoZCA9PiBuZXcgQ29sb3IoZCkpKTtcbiAgfVxufVxuIl19