'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Client = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _oAuthHelper = require('./oAuthHelper');

var _catalogItem = require('./catalogItem/catalogItem');

var _priceGuide = require('./catalogItem/priceGuide');

var _knownColor = require('./catalogItem/knownColor');

var _itemImage = require('./catalogItem/itemImage');

var _subsets = require('./catalogItem/subsets');

var _supersets = require('./catalogItem/supersets');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Create a client to perform
 */
var Client = exports.Client = function () {
  /**
   * Create an instance of the Bricklin Node Client.
   * @param {object} options Options that are used to create a new client.
   * @param {string} [options.token] The `TokenValue` from {@link https://www.bricklink.com/v2/api/register_consumer.page}
   * @param {string} [options.token_secret] The `TokenSecret` from {@link https://www.bricklink.com/v2/api/register_consumer.page}
   * @param {string} [options.consumer_key] The `ConsumerKey` from {@link https://www.bricklink.com/v2/api/register_consumer.page}
   * @param {string} [options.consumer_secret] The `ConsumerSecret` from {@link https://www.bricklink.com/v2/api/register_consumer.page}
   * @param {string} [options.endpoint='https://api.bricklink.com/api/store/v1/'] The url of the Bricklink API.
   * @param {Agent} [options.agent=null] An Http(s) agent for proxy, etc.
   */
  function Client(options) {
    _classCallCheck(this, Client);

    options = options || {};

    /** @type {string} */
    this.token = options.token || '';
    /** @type {string} */
    this.token_secret = options.token_secret || '';
    /** @type {string} */
    this.consumer_key = options.consumer_key || '';
    /** @type {string} */
    this.consumer_secret = options.consumer_secret || '';
    /** @type {string} */
    this.endpoint = options.endpoint || 'https://api.bricklink.com/api/store/v1/';
    /** @type {Agent} */
    this.agent = options.agent || null;
  }

  /**
   * Performs a bricklink request and the callback upon success.
   * @param {Request} req The request to perform.
   * @return {Promise} The data that has been return from the API request and any callbacks.
   */


  _createClass(Client, [{
    key: 'send',
    value: function send(req) {
      var init = {
        uri: this.endpoint + req.uri.replace(/^\//, '') + req.params.toQueryString(),
        method: req.method,
        headers: {}
      };

      var oauthHelper = new _oAuthHelper.OAuthHelper(this.consumer_key, this.token);
      oauthHelper.sign(init.uri, req, this.consumer_secret, this.token_secret);

      if (this.agent) {
        init['agent'] = this.agent;
      }

      init.headers['authorization'] = oauthHelper.header;

      var promise = new Promise(function (resolve, reject) {
        (0, _request2.default)(init, function (er, rep, body) {
          if (er) {
            reject(er);
          }
          var data = JSON.parse(body);
          if (data.meta.code >= 300) {
            console.error(init.uri);
            console.error(data.meta);
          }
          resolve(data.data);
        });
      });

      if (req.callback) {
        promise.then(req.callback);
      }
      return promise;
    }

    /**
     * Get a catalog item by type and identification number.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @return {Promise<CatalogItem>} A promise that resolves to a catalog item.
     */

  }, {
    key: 'getCatalogItem',
    value: function getCatalogItem(itemType, itemNumber) {
      var req = _catalogItem.CatalogItem.get(itemType, itemNumber);

      return this.send(req);
    }

    /**
     * Get the price guide for a given catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @param {object} params Options for the price guide as outlined in {@link PriceGuideOptions}.
     * @return {Promise<PriceGuide>} A promise that resolves to a price guide.
     */

  }, {
    key: 'getPriceGuide',
    value: function getPriceGuide(itemType, itemNumber, params) {
      var req = _priceGuide.PriceGuide.get(itemType, itemNumber, params);

      return this.send(req);
    }

    /**
     * Get known colors for a catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @return {Promise<Array>} A promise that resolves to a list of {@link KnownColor}.
     */

  }, {
    key: 'getKnownColors',
    value: function getKnownColors(itemType, itemNumber) {
      var req = _knownColor.KnownColor.get(itemType, itemNumber);

      return this.send(req);
    }

    /**
     * Can get an image for a specific image color of a known catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @param {number} colorId The color id of the item.
     * @return {Promise<ItemImage>} A promise that resolves to an Item Image.
     */

  }, {
    key: 'getItemImage',
    value: function getItemImage(itemType, itemNumber, colorId) {
      var req = _itemImage.ItemImage.get(itemType, itemNumber, colorId);
      return this.send(req);
    }

    /**
     * Gets a subset of a catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @param {object} [params] Options for the price guide as outlined in {@link SubsetOptions}.
     * @return {Promise<Array>} A promise that resolves to a  list of {@link Subset}.
     */

  }, {
    key: 'getItemSubset',
    value: function getItemSubset(itemType, itemNumber, params) {
      var req = _subsets.Subset.get(itemType, itemNumber, params);
      return this.send(req);
    }

    /**
     * Gets a superset of a catalog item.
     * @param {string} itemType An item type as can be foud at {@link ItemType}.
     * @param {string} itemNumber An item identification number.
     * @param {object} [params] Options for the price guide as outlined in {@link SupersetOptions}.
     * @return {Promise<Array>} A promise that resolves to a  list of {@link Superset}.
     */

  }, {
    key: 'getItemSuperset',
    value: function getItemSuperset(itemType, itemNumber, params) {
      var req = _supersets.Superset.get(itemType, itemNumber, params);
      return this.send(req);
    }
  }]);

  return Client;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,