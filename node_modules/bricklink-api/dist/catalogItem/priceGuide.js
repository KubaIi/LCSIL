'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PriceGuideOptions = exports.PriceGuide = exports.PriceDetail = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('../request');

var _catalogItem = require('./catalogItem');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Specific sale price details for a givent item.
 */
var PriceDetail =
/**
 * Create a Price Detail instance.
 * @param {object} [data] Data returned from an API response.
 */
exports.PriceDetail = function PriceDetail(data) {
  _classCallCheck(this, PriceDetail);

  data = data || {};
  /** @type {number} */
  this.quantity = data.quantity || 0;
  /** @type {number} */
  this.unit_price = data.unit_price || 0;
  /** @type {string} */
  this.shipping_available = data.shipping_available || '';
  /** @type {string} */
  this.shipping_available = data.shipping_available || '';
  /** @type {string} */
  this.seller_country_code = data.seller_country_code || '';
  /** @type {string} */
  this.buyer_country_code = data.buyer_country_code || '';
  /** @type {Date|null} */
  this.date_ordered = data.date_ordered ? new Date(datea.date_ordered) : null;
};

/**
 * Represents a Price Guide for a catalog item.
 */


var PriceGuide = exports.PriceGuide = function () {
  /**
   * Create a new instance of a price guide.
   * @param {object} [data] Data returned from an API response.
   */
  function PriceGuide(data) {
    _classCallCheck(this, PriceGuide);

    /** @type {Item} item The item that belongs to the price guide. */
    this.item = data.item ? new _catalogItem.CatalogItem(data.item) : new Item();
    /** @type {string} new_or_used Whether or not the price guide is new or used condition. */
    this.new_or_used = data.new_or_used || '';
    /** @type {string} */
    this.currency_code = data.currency_code || '';
    /** @type {number} */
    this.min_price = data.min_price || 0;
    /** @type {number} */
    this.max_price = data.max_price || 0;
    /** @type {number} */
    this.avg_price = data.avg_price || 0;
    /** @type {number} */
    this.qty_avg_price = data.qty_avg_price || 0;
    /** @type {number} */
    this.unit_quantity = data.unit_quantity || 0;
    /** @type {number} */
    this.total_quantity = data.total_quantity || 0;
    /** @type {PriceDetail[]} */
    this.price_detail = data.price_detail ? data.price_detail.map(function (detail) {
      return new PriceDetail(detail);
    }) : [];
  }

  /**
   * Method to get a known catalog item's price guide
   *
   * Usage:
   *
   * ```
   * var req = PriceGuide.get(ItemType.Part, '3001', {new_or_used: Condition.Used});
   * client.send(req).then(guide => console.log(guide));
   * ```
   *
   * @param {string} itemType Catalog item type as found at {@link ItemType}.
   * @param {string} itemNumber Catalog item number
   * @param {object} [params] Params as outlined in {@link PriceGuideOptions}.
   * @return {Request} A request that is ready to execute with a client.
   */


  _createClass(PriceGuide, null, [{
    key: 'get',
    value: function get(itemType, itemNumber, params) {
      params = params ? new PriceGuideOptions(params) : new PriceGuideOptions();
      var method = _request.Request.GET;
      var uri = 'items/' + itemType + '/' + itemNumber + '/price';

      return new _request.Request(method, uri, params, function (data) {
        return new _catalogItem.CatalogItem(data);
      });
    }
  }]);

  return PriceGuide;
}();

/**
 * Price guide option request params.
 */


var PriceGuideOptions = exports.PriceGuideOptions = function (_RequestParams) {
  _inherits(PriceGuideOptions, _RequestParams);

  /**
   * Create an instance of Price Guide options.
   * @param {object} data Optional parameter data.
   * @param {number|null} [data.color_id=null] The color Identification numbe of the item
   * @param {string} [data.guide_type='stock'] Indicates that which statistics to be provided. Options include "sold" and "stock"
   * @param {string} [data.new_or_used='N'] Indicates the condition of items that are included in the statistics. Acceptable values are: "N": new item (default) and "U": used item
   * @param {string|null} [data.country_code=null]
   * @param {string|null} [data.region=null]
   * @param {string|null} [data.currency_code=null]
   * @param {string} [data.vat='N']
   */
  function PriceGuideOptions(data) {
    _classCallCheck(this, PriceGuideOptions);

    var _this = _possibleConstructorReturn(this, (PriceGuideOptions.__proto__ || Object.getPrototypeOf(PriceGuideOptions)).call(this, data));

    data = data || {};
    /** @type {number|null} [data.color_id=null] The color Identification numbe of the item */
    _this.color_id = data.color_id || null;
    /** @type {string} [guide_type='stock'] Indicates that which statistics to be provided. Options include "sold" and "stock" */
    _this.guide_type = data.guide_type || 'stock';
    /** @type {string} [new_or_used='N'] Indicates the condition of items that are included in the statistics. Acceptable values are: "N": new item (default) and "U": used item */
    _this.new_or_used = data.new_or_used || 'N';
    /** @type {string|null} [country_code=null] */
    _this.country_code = data.country_code || null;
    /** @type {string|null} [region=null] */
    _this.region = data.region || null;
    /** @type {string|null} [currency_code=null] */
    _this.currency_code = data.currency_code || null;
    /** @type {string} [vat='N'] */
    _this.vat = data.vat || 'N';
    return _this;
  }

  return PriceGuideOptions;
}(_request.RequestParams);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYXRhbG9nSXRlbS9wcmljZUd1aWRlLmpzIl0sIm5hbWVzIjpbIlByaWNlRGV0YWlsIiwiZGF0YSIsInF1YW50aXR5IiwidW5pdF9wcmljZSIsInNoaXBwaW5nX2F2YWlsYWJsZSIsInNlbGxlcl9jb3VudHJ5X2NvZGUiLCJidXllcl9jb3VudHJ5X2NvZGUiLCJkYXRlX29yZGVyZWQiLCJEYXRlIiwiZGF0ZWEiLCJQcmljZUd1aWRlIiwiaXRlbSIsIkl0ZW0iLCJuZXdfb3JfdXNlZCIsImN1cnJlbmN5X2NvZGUiLCJtaW5fcHJpY2UiLCJtYXhfcHJpY2UiLCJhdmdfcHJpY2UiLCJxdHlfYXZnX3ByaWNlIiwidW5pdF9xdWFudGl0eSIsInRvdGFsX3F1YW50aXR5IiwicHJpY2VfZGV0YWlsIiwibWFwIiwiZGV0YWlsIiwiaXRlbVR5cGUiLCJpdGVtTnVtYmVyIiwicGFyYW1zIiwiUHJpY2VHdWlkZU9wdGlvbnMiLCJtZXRob2QiLCJHRVQiLCJ1cmkiLCJjb2xvcl9pZCIsImd1aWRlX3R5cGUiLCJjb3VudHJ5X2NvZGUiLCJyZWdpb24iLCJ2YXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7OztBQUVBOzs7SUFHYUEsVztBQUNYOzs7O1FBRFdBLFcsR0FLWCxxQkFBWUMsSUFBWixFQUFpQjtBQUFBOztBQUNmQSxTQUFPQSxRQUFRLEVBQWY7QUFDQTtBQUNBLE9BQUtDLFFBQUwsR0FBZ0JELEtBQUtDLFFBQUwsSUFBaUIsQ0FBakM7QUFDQTtBQUNBLE9BQUtDLFVBQUwsR0FBa0JGLEtBQUtFLFVBQUwsSUFBbUIsQ0FBckM7QUFDQTtBQUNBLE9BQUtDLGtCQUFMLEdBQTBCSCxLQUFLRyxrQkFBTCxJQUEyQixFQUFyRDtBQUNBO0FBQ0EsT0FBS0Esa0JBQUwsR0FBMEJILEtBQUtHLGtCQUFMLElBQTJCLEVBQXJEO0FBQ0E7QUFDQSxPQUFLQyxtQkFBTCxHQUEyQkosS0FBS0ksbUJBQUwsSUFBNEIsRUFBdkQ7QUFDQTtBQUNBLE9BQUtDLGtCQUFMLEdBQTBCTCxLQUFLSyxrQkFBTCxJQUEyQixFQUFyRDtBQUNBO0FBQ0EsT0FBS0MsWUFBTCxHQUFvQk4sS0FBS00sWUFBTCxHQUFvQixJQUFJQyxJQUFKLENBQVNDLE1BQU1GLFlBQWYsQ0FBcEIsR0FBbUQsSUFBdkU7QUFDRCxDOztBQUdIOzs7OztJQUdhRyxVLFdBQUFBLFU7QUFDWDs7OztBQUlBLHNCQUFZVCxJQUFaLEVBQWlCO0FBQUE7O0FBQ2Y7QUFDQSxTQUFLVSxJQUFMLEdBQVlWLEtBQUtVLElBQUwsR0FBWSw2QkFBZ0JWLEtBQUtVLElBQXJCLENBQVosR0FBeUMsSUFBSUMsSUFBSixFQUFyRDtBQUNBO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQlosS0FBS1ksV0FBTCxJQUFvQixFQUF2QztBQUNBO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQmIsS0FBS2EsYUFBTCxJQUFzQixFQUEzQztBQUNBO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQmQsS0FBS2MsU0FBTCxJQUFrQixDQUFuQztBQUNBO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQmYsS0FBS2UsU0FBTCxJQUFrQixDQUFuQztBQUNBO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQmhCLEtBQUtnQixTQUFMLElBQWtCLENBQW5DO0FBQ0E7QUFDQSxTQUFLQyxhQUFMLEdBQXFCakIsS0FBS2lCLGFBQUwsSUFBc0IsQ0FBM0M7QUFDQTtBQUNBLFNBQUtDLGFBQUwsR0FBcUJsQixLQUFLa0IsYUFBTCxJQUFzQixDQUEzQztBQUNBO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQm5CLEtBQUttQixjQUFMLElBQXVCLENBQTdDO0FBQ0E7QUFDQSxTQUFLQyxZQUFMLEdBQW9CcEIsS0FBS29CLFlBQUwsR0FDbEJwQixLQUFLb0IsWUFBTCxDQUFrQkMsR0FBbEIsQ0FBc0I7QUFBQSxhQUFVLElBQUl0QixXQUFKLENBQWdCdUIsTUFBaEIsQ0FBVjtBQUFBLEtBQXRCLENBRGtCLEdBQ3lDLEVBRDdEO0FBRUQ7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBZVdDLFEsRUFBVUMsVSxFQUFZQyxNLEVBQVE7QUFDdkNBLGVBQVNBLFNBQVMsSUFBSUMsaUJBQUosQ0FBc0JELE1BQXRCLENBQVQsR0FBeUMsSUFBSUMsaUJBQUosRUFBbEQ7QUFDQSxVQUFJQyxTQUFTLGlCQUFRQyxHQUFyQjtBQUNBLFVBQUlDLGlCQUFlTixRQUFmLFNBQTJCQyxVQUEzQixXQUFKOztBQUVBLGFBQU8scUJBQVlHLE1BQVosRUFBb0JFLEdBQXBCLEVBQXlCSixNQUF6QixFQUFpQyxVQUFDekIsSUFBRCxFQUFVO0FBQ2hELGVBQU8sNkJBQWdCQSxJQUFoQixDQUFQO0FBQ0QsT0FGTSxDQUFQO0FBR0Q7Ozs7OztBQUdIOzs7OztJQUdhMEIsaUIsV0FBQUEsaUI7OztBQUNYOzs7Ozs7Ozs7OztBQVdBLDZCQUFZMUIsSUFBWixFQUFpQjtBQUFBOztBQUFBLHNJQUNUQSxJQURTOztBQUdmQSxXQUFPQSxRQUFRLEVBQWY7QUFDQTtBQUNBLFVBQUs4QixRQUFMLEdBQWdCOUIsS0FBSzhCLFFBQUwsSUFBaUIsSUFBakM7QUFDQTtBQUNBLFVBQUtDLFVBQUwsR0FBa0IvQixLQUFLK0IsVUFBTCxJQUFtQixPQUFyQztBQUNBO0FBQ0EsVUFBS25CLFdBQUwsR0FBbUJaLEtBQUtZLFdBQUwsSUFBb0IsR0FBdkM7QUFDQTtBQUNBLFVBQUtvQixZQUFMLEdBQW9CaEMsS0FBS2dDLFlBQUwsSUFBcUIsSUFBekM7QUFDQTtBQUNBLFVBQUtDLE1BQUwsR0FBY2pDLEtBQUtpQyxNQUFMLElBQWUsSUFBN0I7QUFDQTtBQUNBLFVBQUtwQixhQUFMLEdBQXFCYixLQUFLYSxhQUFMLElBQXNCLElBQTNDO0FBQ0E7QUFDQSxVQUFLcUIsR0FBTCxHQUFXbEMsS0FBS2tDLEdBQUwsSUFBWSxHQUF2QjtBQWpCZTtBQWtCaEIiLCJmaWxlIjoicHJpY2VHdWlkZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVxdWVzdCwgUmVxdWVzdFBhcmFtc30gZnJvbSAnLi4vcmVxdWVzdCc7XG5pbXBvcnQge0NhdGFsb2dJdGVtfSBmcm9tICcuL2NhdGFsb2dJdGVtJztcblxuLyoqXG4gKiBTcGVjaWZpYyBzYWxlIHByaWNlIGRldGFpbHMgZm9yIGEgZ2l2ZW50IGl0ZW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBQcmljZURldGFpbHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIFByaWNlIERldGFpbCBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXSBEYXRhIHJldHVybmVkIGZyb20gYW4gQVBJIHJlc3BvbnNlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSl7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5xdWFudGl0eSA9IGRhdGEucXVhbnRpdHkgfHwgMDtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICB0aGlzLnVuaXRfcHJpY2UgPSBkYXRhLnVuaXRfcHJpY2UgfHwgMDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLnNoaXBwaW5nX2F2YWlsYWJsZSA9IGRhdGEuc2hpcHBpbmdfYXZhaWxhYmxlIHx8ICcnO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc2hpcHBpbmdfYXZhaWxhYmxlID0gZGF0YS5zaGlwcGluZ19hdmFpbGFibGUgfHwgJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy5zZWxsZXJfY291bnRyeV9jb2RlID0gZGF0YS5zZWxsZXJfY291bnRyeV9jb2RlIHx8ICcnO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuYnV5ZXJfY291bnRyeV9jb2RlID0gZGF0YS5idXllcl9jb3VudHJ5X2NvZGUgfHwgJyc7XG4gICAgLyoqIEB0eXBlIHtEYXRlfG51bGx9ICovXG4gICAgdGhpcy5kYXRlX29yZGVyZWQgPSBkYXRhLmRhdGVfb3JkZXJlZCA/IG5ldyBEYXRlKGRhdGVhLmRhdGVfb3JkZXJlZCkgOiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFByaWNlIEd1aWRlIGZvciBhIGNhdGFsb2cgaXRlbS5cbiAqL1xuZXhwb3J0IGNsYXNzIFByaWNlR3VpZGUge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIGEgcHJpY2UgZ3VpZGUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbZGF0YV0gRGF0YSByZXR1cm5lZCBmcm9tIGFuIEFQSSByZXNwb25zZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRhdGEpe1xuICAgIC8qKiBAdHlwZSB7SXRlbX0gaXRlbSBUaGUgaXRlbSB0aGF0IGJlbG9uZ3MgdG8gdGhlIHByaWNlIGd1aWRlLiAqL1xuICAgIHRoaXMuaXRlbSA9IGRhdGEuaXRlbSA/IG5ldyBDYXRhbG9nSXRlbShkYXRhLml0ZW0pIDogbmV3IEl0ZW0oKTtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gbmV3X29yX3VzZWQgV2hldGhlciBvciBub3QgdGhlIHByaWNlIGd1aWRlIGlzIG5ldyBvciB1c2VkIGNvbmRpdGlvbi4gKi9cbiAgICB0aGlzLm5ld19vcl91c2VkID0gZGF0YS5uZXdfb3JfdXNlZCB8fCAnJztcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLmN1cnJlbmN5X2NvZGUgPSBkYXRhLmN1cnJlbmN5X2NvZGUgfHwgJyc7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5taW5fcHJpY2UgPSBkYXRhLm1pbl9wcmljZSB8fCAwO1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMubWF4X3ByaWNlID0gZGF0YS5tYXhfcHJpY2UgfHwgMDtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICB0aGlzLmF2Z19wcmljZSA9IGRhdGEuYXZnX3ByaWNlIHx8IDA7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5xdHlfYXZnX3ByaWNlID0gZGF0YS5xdHlfYXZnX3ByaWNlIHx8IDA7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy51bml0X3F1YW50aXR5ID0gZGF0YS51bml0X3F1YW50aXR5IHx8IDA7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy50b3RhbF9xdWFudGl0eSA9IGRhdGEudG90YWxfcXVhbnRpdHkgfHwgMDtcbiAgICAvKiogQHR5cGUge1ByaWNlRGV0YWlsW119ICovXG4gICAgdGhpcy5wcmljZV9kZXRhaWwgPSBkYXRhLnByaWNlX2RldGFpbCA/XG4gICAgICBkYXRhLnByaWNlX2RldGFpbC5tYXAoZGV0YWlsID0+IG5ldyBQcmljZURldGFpbChkZXRhaWwpKSA6IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBnZXQgYSBrbm93biBjYXRhbG9nIGl0ZW0ncyBwcmljZSBndWlkZVxuICAgKlxuICAgKiBVc2FnZTpcbiAgICpcbiAgICogYGBgXG4gICAqIHZhciByZXEgPSBQcmljZUd1aWRlLmdldChJdGVtVHlwZS5QYXJ0LCAnMzAwMScsIHtuZXdfb3JfdXNlZDogQ29uZGl0aW9uLlVzZWR9KTtcbiAgICogY2xpZW50LnNlbmQocmVxKS50aGVuKGd1aWRlID0+IGNvbnNvbGUubG9nKGd1aWRlKSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaXRlbVR5cGUgQ2F0YWxvZyBpdGVtIHR5cGUgYXMgZm91bmQgYXQge0BsaW5rIEl0ZW1UeXBlfS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGl0ZW1OdW1iZXIgQ2F0YWxvZyBpdGVtIG51bWJlclxuICAgKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gUGFyYW1zIGFzIG91dGxpbmVkIGluIHtAbGluayBQcmljZUd1aWRlT3B0aW9uc30uXG4gICAqIEByZXR1cm4ge1JlcXVlc3R9IEEgcmVxdWVzdCB0aGF0IGlzIHJlYWR5IHRvIGV4ZWN1dGUgd2l0aCBhIGNsaWVudC5cbiAgICovXG4gIHN0YXRpYyBnZXQoaXRlbVR5cGUsIGl0ZW1OdW1iZXIsIHBhcmFtcykge1xuICAgIHBhcmFtcyA9IHBhcmFtcyA/IG5ldyBQcmljZUd1aWRlT3B0aW9ucyhwYXJhbXMpIDogbmV3IFByaWNlR3VpZGVPcHRpb25zKCk7XG4gICAgbGV0IG1ldGhvZCA9IFJlcXVlc3QuR0VUO1xuICAgIGxldCB1cmkgPSBgaXRlbXMvJHtpdGVtVHlwZX0vJHtpdGVtTnVtYmVyfS9wcmljZWA7XG5cbiAgICByZXR1cm4gbmV3IFJlcXVlc3QobWV0aG9kLCB1cmksIHBhcmFtcywgKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiBuZXcgQ2F0YWxvZ0l0ZW0oZGF0YSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBQcmljZSBndWlkZSBvcHRpb24gcmVxdWVzdCBwYXJhbXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcmljZUd1aWRlT3B0aW9ucyBleHRlbmRzIFJlcXVlc3RQYXJhbXN7XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgUHJpY2UgR3VpZGUgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgT3B0aW9uYWwgcGFyYW1ldGVyIGRhdGEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfG51bGx9IFtkYXRhLmNvbG9yX2lkPW51bGxdIFRoZSBjb2xvciBJZGVudGlmaWNhdGlvbiBudW1iZSBvZiB0aGUgaXRlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2RhdGEuZ3VpZGVfdHlwZT0nc3RvY2snXSBJbmRpY2F0ZXMgdGhhdCB3aGljaCBzdGF0aXN0aWNzIHRvIGJlIHByb3ZpZGVkLiBPcHRpb25zIGluY2x1ZGUgXCJzb2xkXCIgYW5kIFwic3RvY2tcIlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2RhdGEubmV3X29yX3VzZWQ9J04nXSBJbmRpY2F0ZXMgdGhlIGNvbmRpdGlvbiBvZiBpdGVtcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiB0aGUgc3RhdGlzdGljcy4gQWNjZXB0YWJsZSB2YWx1ZXMgYXJlOiBcIk5cIjogbmV3IGl0ZW0gKGRlZmF1bHQpIGFuZCBcIlVcIjogdXNlZCBpdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IFtkYXRhLmNvdW50cnlfY29kZT1udWxsXVxuICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBbZGF0YS5yZWdpb249bnVsbF1cbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gW2RhdGEuY3VycmVuY3lfY29kZT1udWxsXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2RhdGEudmF0PSdOJ11cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRhdGEpe1xuICAgIHN1cGVyKGRhdGEpO1xuXG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ8bnVsbH0gW2RhdGEuY29sb3JfaWQ9bnVsbF0gVGhlIGNvbG9yIElkZW50aWZpY2F0aW9uIG51bWJlIG9mIHRoZSBpdGVtICovXG4gICAgdGhpcy5jb2xvcl9pZCA9IGRhdGEuY29sb3JfaWQgfHwgbnVsbDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gW2d1aWRlX3R5cGU9J3N0b2NrJ10gSW5kaWNhdGVzIHRoYXQgd2hpY2ggc3RhdGlzdGljcyB0byBiZSBwcm92aWRlZC4gT3B0aW9ucyBpbmNsdWRlIFwic29sZFwiIGFuZCBcInN0b2NrXCIgKi9cbiAgICB0aGlzLmd1aWRlX3R5cGUgPSBkYXRhLmd1aWRlX3R5cGUgfHwgJ3N0b2NrJztcbiAgICAvKiogQHR5cGUge3N0cmluZ30gW25ld19vcl91c2VkPSdOJ10gSW5kaWNhdGVzIHRoZSBjb25kaXRpb24gb2YgaXRlbXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gdGhlIHN0YXRpc3RpY3MuIEFjY2VwdGFibGUgdmFsdWVzIGFyZTogXCJOXCI6IG5ldyBpdGVtIChkZWZhdWx0KSBhbmQgXCJVXCI6IHVzZWQgaXRlbSAqL1xuICAgIHRoaXMubmV3X29yX3VzZWQgPSBkYXRhLm5ld19vcl91c2VkIHx8ICdOJztcbiAgICAvKiogQHR5cGUge3N0cmluZ3xudWxsfSBbY291bnRyeV9jb2RlPW51bGxdICovXG4gICAgdGhpcy5jb3VudHJ5X2NvZGUgPSBkYXRhLmNvdW50cnlfY29kZSB8fCBudWxsO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfG51bGx9IFtyZWdpb249bnVsbF0gKi9cbiAgICB0aGlzLnJlZ2lvbiA9IGRhdGEucmVnaW9uIHx8IG51bGw7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd8bnVsbH0gW2N1cnJlbmN5X2NvZGU9bnVsbF0gKi9cbiAgICB0aGlzLmN1cnJlbmN5X2NvZGUgPSBkYXRhLmN1cnJlbmN5X2NvZGUgfHwgbnVsbDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gW3ZhdD0nTiddICovXG4gICAgdGhpcy52YXQgPSBkYXRhLnZhdCB8fCAnTic7XG4gIH1cbn1cbiJdfQ==