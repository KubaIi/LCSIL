'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SupersetOptions = exports.Superset = exports.SupersetEntry = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('../request');

var _catalogItem = require('./catalogItem');

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents entries of a superset item.
 */
var SupersetEntry =
/**
 * Create an instance of a subset entry
 * @param {object} [data] The API response data
 * @param {object} [data.item] Item information
 * @param {number} [data.quantity] The number of items in the subset entry.
 * @param {string} [data.appear_as] How the entry appears in the superset item.
 */
exports.SupersetEntry = function SupersetEntry(data) {
  _classCallCheck(this, SupersetEntry);

  data = data || {};
  /** @type {CatalogItem} */
  this.item = data.item ? new _catalogItem.CatalogItem(data.item) : new _catalogItem.CatalogItem();
  /** @type {number} */
  this.quantity = data.quantity || 0;
  /** @type {string} */
  this.appear_as = data.appear_as || '';
};

/**
 * Represents a super set entry.
 */


var Superset = exports.Superset = function () {
  /**
   * Create an instance of a super set item.
   * @param {object} [data] The API response data
   * @param {object[]} [data.entries] Entries for a superset item.
   * @param {number} [data.color_id] The color id of the superset item.
   */
  function Superset(data) {
    _classCallCheck(this, Superset);

    data = data || {};
    /** @type {number} */
    this.color_id = data.color_id || 0;

    var entries = data.entries || [];
    /** @type {SupersetEntry[]} */
    this.entries = entries.map(function (e) {
      return new SupersetEntry(e);
    });
  }

  /**
   * Method to get a superset of a catalog item
   *
   * Usage:
   *
   * ```
   * var req = Superset.get(ItemType.Part, '4593');
   * client.send(req).then(superset => console.log(superset));
   * ```
   *
   * @param {string} itemType Catalog item type
   * @param {string} itemNumber Catalog item number
   * @param {object} options Options that conform to {@link SupersetOptions}.
   * @return {Request} A request that will return an array of {@link Superset} items.
   */


  _createClass(Superset, null, [{
    key: 'get',
    value: function get(itemType, itemNumber, options) {
      options = options ? new SupersetOptions(options) : new SupersetOptions();
      var method = _request.Request.GET;
      var uri = '/items/' + itemType + '/' + itemNumber + '/supersets';

      return new _request.Request(method, uri, options, function (data) {
        return data.map(function (set) {
          return new Superset(set);
        });
      });
    }
  }]);

  return Superset;
}();

/**
 * Options that can be used when make a request for a subset.
 */


var SupersetOptions = exports.SupersetOptions = function (_RequestParams) {
  _inherits(SupersetOptions, _RequestParams);

  /**
   * Make an instance of SubsetOptions.
   * @param {object} [data] Raw options object.
   * @param {number} [data.color_id] The color of the item.
   */
  function SupersetOptions(data) {
    _classCallCheck(this, SupersetOptions);

    var _this = _possibleConstructorReturn(this, (SupersetOptions.__proto__ || Object.getPrototypeOf(SupersetOptions)).call(this, data));

    data = data || {};
    /** @type {number|null} */
    _this.color_id = data.color_id || null;
    return _this;
  }

  return SupersetOptions;
}(_request.RequestParams);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jYXRhbG9nSXRlbS9zdXBlcnNldHMuanMiXSwibmFtZXMiOlsiU3VwZXJzZXRFbnRyeSIsImRhdGEiLCJpdGVtIiwicXVhbnRpdHkiLCJhcHBlYXJfYXMiLCJTdXBlcnNldCIsImNvbG9yX2lkIiwiZW50cmllcyIsIm1hcCIsImUiLCJpdGVtVHlwZSIsIml0ZW1OdW1iZXIiLCJvcHRpb25zIiwiU3VwZXJzZXRPcHRpb25zIiwibWV0aG9kIiwiR0VUIiwidXJpIiwic2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7QUFFQTs7O0lBR2FBLGE7QUFDWDs7Ozs7OztRQURXQSxhLEdBUVgsdUJBQVlDLElBQVosRUFBa0I7QUFBQTs7QUFDaEJBLFNBQU9BLFFBQVEsRUFBZjtBQUNBO0FBQ0EsT0FBS0MsSUFBTCxHQUFZRCxLQUFLQyxJQUFMLEdBQVksNkJBQWdCRCxLQUFLQyxJQUFyQixDQUFaLEdBQXlDLDhCQUFyRDtBQUNBO0FBQ0EsT0FBS0MsUUFBTCxHQUFnQkYsS0FBS0UsUUFBTCxJQUFpQixDQUFqQztBQUNBO0FBQ0EsT0FBS0MsU0FBTCxHQUFpQkgsS0FBS0csU0FBTCxJQUFrQixFQUFuQztBQUNELEM7O0FBR0g7Ozs7O0lBR2FDLFEsV0FBQUEsUTtBQUNYOzs7Ozs7QUFNQSxvQkFBWUosSUFBWixFQUFrQjtBQUFBOztBQUNoQkEsV0FBT0EsUUFBUSxFQUFmO0FBQ0E7QUFDQSxTQUFLSyxRQUFMLEdBQWdCTCxLQUFLSyxRQUFMLElBQWlCLENBQWpDOztBQUVBLFFBQUlDLFVBQVVOLEtBQUtNLE9BQUwsSUFBZ0IsRUFBOUI7QUFDQTtBQUNBLFNBQUtBLE9BQUwsR0FBZUEsUUFBUUMsR0FBUixDQUFZO0FBQUEsYUFBSyxJQUFJUixhQUFKLENBQWtCUyxDQUFsQixDQUFMO0FBQUEsS0FBWixDQUFmO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBZVdDLFEsRUFBVUMsVSxFQUFZQyxPLEVBQVM7QUFDeENBLGdCQUFVQSxVQUFVLElBQUlDLGVBQUosQ0FBb0JELE9BQXBCLENBQVYsR0FBeUMsSUFBSUMsZUFBSixFQUFuRDtBQUNBLFVBQUlDLFNBQVMsaUJBQVFDLEdBQXJCO0FBQ0EsVUFBSUMsa0JBQWdCTixRQUFoQixTQUE0QkMsVUFBNUIsZUFBSjs7QUFFQSxhQUFPLHFCQUFZRyxNQUFaLEVBQW9CRSxHQUFwQixFQUF5QkosT0FBekIsRUFBa0MsVUFBQ1gsSUFBRCxFQUFVO0FBQ2pELGVBQU9BLEtBQUtPLEdBQUwsQ0FBVTtBQUFBLGlCQUFPLElBQUlILFFBQUosQ0FBYVksR0FBYixDQUFQO0FBQUEsU0FBVixDQUFQO0FBQ0QsT0FGTSxDQUFQO0FBR0Q7Ozs7OztBQUdIOzs7OztJQUdhSixlLFdBQUFBLGU7OztBQUNYOzs7OztBQUtBLDJCQUFZWixJQUFaLEVBQWlCO0FBQUE7O0FBQUEsa0lBQ1RBLElBRFM7O0FBRWZBLFdBQU9BLFFBQVEsRUFBZjtBQUNBO0FBQ0EsVUFBS0ssUUFBTCxHQUFnQkwsS0FBS0ssUUFBTCxJQUFpQixJQUFqQztBQUplO0FBS2hCIiwiZmlsZSI6InN1cGVyc2V0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVxdWVzdCwgUmVxdWVzdFBhcmFtc30gZnJvbSAnLi4vcmVxdWVzdCc7XG5pbXBvcnQge0NhdGFsb2dJdGVtfSBmcm9tICcuL2NhdGFsb2dJdGVtJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGVudHJpZXMgb2YgYSBzdXBlcnNldCBpdGVtLlxuICovXG5leHBvcnQgY2xhc3MgU3VwZXJzZXRFbnRyeSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYSBzdWJzZXQgZW50cnlcbiAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXSBUaGUgQVBJIHJlc3BvbnNlIGRhdGFcbiAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhLml0ZW1dIEl0ZW0gaW5mb3JtYXRpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXRhLnF1YW50aXR5XSBUaGUgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBzdWJzZXQgZW50cnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YS5hcHBlYXJfYXNdIEhvdyB0aGUgZW50cnkgYXBwZWFycyBpbiB0aGUgc3VwZXJzZXQgaXRlbS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICAvKiogQHR5cGUge0NhdGFsb2dJdGVtfSAqL1xuICAgIHRoaXMuaXRlbSA9IGRhdGEuaXRlbSA/IG5ldyBDYXRhbG9nSXRlbShkYXRhLml0ZW0pIDogbmV3IENhdGFsb2dJdGVtKCk7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5xdWFudGl0eSA9IGRhdGEucXVhbnRpdHkgfHwgMDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLmFwcGVhcl9hcyA9IGRhdGEuYXBwZWFyX2FzIHx8ICcnO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHN1cGVyIHNldCBlbnRyeS5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1cGVyc2V0e1xuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIGEgc3VwZXIgc2V0IGl0ZW0uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbZGF0YV0gVGhlIEFQSSByZXNwb25zZSBkYXRhXG4gICAqIEBwYXJhbSB7b2JqZWN0W119IFtkYXRhLmVudHJpZXNdIEVudHJpZXMgZm9yIGEgc3VwZXJzZXQgaXRlbS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXRhLmNvbG9yX2lkXSBUaGUgY29sb3IgaWQgb2YgdGhlIHN1cGVyc2V0IGl0ZW0uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5jb2xvcl9pZCA9IGRhdGEuY29sb3JfaWQgfHwgMDtcblxuICAgIGxldCBlbnRyaWVzID0gZGF0YS5lbnRyaWVzIHx8IFtdO1xuICAgIC8qKiBAdHlwZSB7U3VwZXJzZXRFbnRyeVtdfSAqL1xuICAgIHRoaXMuZW50cmllcyA9IGVudHJpZXMubWFwKGUgPT4gbmV3IFN1cGVyc2V0RW50cnkoZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBnZXQgYSBzdXBlcnNldCBvZiBhIGNhdGFsb2cgaXRlbVxuICAgKlxuICAgKiBVc2FnZTpcbiAgICpcbiAgICogYGBgXG4gICAqIHZhciByZXEgPSBTdXBlcnNldC5nZXQoSXRlbVR5cGUuUGFydCwgJzQ1OTMnKTtcbiAgICogY2xpZW50LnNlbmQocmVxKS50aGVuKHN1cGVyc2V0ID0+IGNvbnNvbGUubG9nKHN1cGVyc2V0KSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaXRlbVR5cGUgQ2F0YWxvZyBpdGVtIHR5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGl0ZW1OdW1iZXIgQ2F0YWxvZyBpdGVtIG51bWJlclxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25zIHRoYXQgY29uZm9ybSB0byB7QGxpbmsgU3VwZXJzZXRPcHRpb25zfS5cbiAgICogQHJldHVybiB7UmVxdWVzdH0gQSByZXF1ZXN0IHRoYXQgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2Yge0BsaW5rIFN1cGVyc2V0fSBpdGVtcy5cbiAgICovXG4gIHN0YXRpYyBnZXQoaXRlbVR5cGUsIGl0ZW1OdW1iZXIsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyA/IG5ldyBTdXBlcnNldE9wdGlvbnMob3B0aW9ucykgOiBuZXcgU3VwZXJzZXRPcHRpb25zKCk7XG4gICAgbGV0IG1ldGhvZCA9IFJlcXVlc3QuR0VUO1xuICAgIGxldCB1cmkgPSBgL2l0ZW1zLyR7aXRlbVR5cGV9LyR7aXRlbU51bWJlcn0vc3VwZXJzZXRzYDtcblxuICAgIHJldHVybiBuZXcgUmVxdWVzdChtZXRob2QsIHVyaSwgb3B0aW9ucywgKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiBkYXRhLm1hcCggc2V0ID0+IG5ldyBTdXBlcnNldChzZXQpICk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBPcHRpb25zIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiBtYWtlIGEgcmVxdWVzdCBmb3IgYSBzdWJzZXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdXBlcnNldE9wdGlvbnMgZXh0ZW5kcyBSZXF1ZXN0UGFyYW1zIHtcbiAgLyoqXG4gICAqIE1ha2UgYW4gaW5zdGFuY2Ugb2YgU3Vic2V0T3B0aW9ucy5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXSBSYXcgb3B0aW9ucyBvYmplY3QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbZGF0YS5jb2xvcl9pZF0gVGhlIGNvbG9yIG9mIHRoZSBpdGVtLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YSl7XG4gICAgc3VwZXIoZGF0YSk7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ8bnVsbH0gKi9cbiAgICB0aGlzLmNvbG9yX2lkID0gZGF0YS5jb2xvcl9pZCB8fCBudWxsO1xuICB9XG59XG4iXX0=