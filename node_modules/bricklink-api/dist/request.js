'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Creates a request to use with the client.
 */
var Request = exports.Request = function () {
  /**
   * Create a new request.
   * @param {string} method The type of HTTP request to perform.
   * @param {string} uri The relative of full path uri of a request to perform. This should not include any query parameters.
   * @param {RequestParams} [params] Additional parameters to include with the request in either post body or query params.
   * @param {function} [callback=null] A callback function to perform after the request has been successfully performed.
   */
  function Request(method, uri, params, callback) {
    _classCallCheck(this, Request);

    /** @type {string} */
    this.method = method;
    /** @type {string} */
    this.uri = uri;
    /** @type {RequestParams} */
    this.params = params || new RequestParams();
    /** @type {function|null} */
    this.callback = callback || null;
  }
  /** @type {string} */


  _createClass(Request, null, [{
    key: 'GET',
    get: function get() {
      return 'get';
    }

    /** @type {string} */

  }, {
    key: 'PUT',
    get: function get() {
      return 'put';
    }

    /** @type {string} */

  }, {
    key: 'POST',
    get: function get() {
      return 'post';
    }

    /** @type {string} */

  }, {
    key: 'DELETE',
    get: function get() {
      return 'put';
    }
  }]);

  return Request;
}();

/**
 * Represents any query parameters to use with a request.
 */


var RequestParams = exports.RequestParams = function () {
  function RequestParams() {
    _classCallCheck(this, RequestParams);
  }

  _createClass(RequestParams, [{
    key: 'toQueryString',

    /**
     * Convert params for the request to a query string.
     * @return {string} parameters in the format of '?<param>=<value>'.
     */
    value: function toQueryString() {
      var pairs = [];
      for (var member in this) {
        if (this[member] != null) {
          pairs.push(member + '=' + this[member]);
        }
      }
      if (pairs.length > 0) {
        return '?' + pairs.join('&');
      }
      return '';
    }

    /**
     * Convert params for the request to a an object.
     * @return {object} trimmed down parameters object.
     */

  }, {
    key: 'toObject',
    value: function toObject() {
      var params = {};
      for (var member in this) {
        if (this[member] != null) {
          params[member] = this[member];
        }
      }
      return params;
    }
  }]);

  return RequestParams;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0LmpzIl0sIm5hbWVzIjpbIlJlcXVlc3QiLCJtZXRob2QiLCJ1cmkiLCJwYXJhbXMiLCJjYWxsYmFjayIsIlJlcXVlc3RQYXJhbXMiLCJwYWlycyIsIm1lbWJlciIsInB1c2giLCJsZW5ndGgiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7OztJQUdhQSxPLFdBQUFBLE87QUFDWDs7Ozs7OztBQU9BLG1CQUFZQyxNQUFaLEVBQW9CQyxHQUFwQixFQUF5QkMsTUFBekIsRUFBaUNDLFFBQWpDLEVBQTBDO0FBQUE7O0FBQ3hDO0FBQ0EsU0FBS0gsTUFBTCxHQUFjQSxNQUFkO0FBQ0E7QUFDQSxTQUFLQyxHQUFMLEdBQVdBLEdBQVg7QUFDQTtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsVUFBVSxJQUFJRSxhQUFKLEVBQXhCO0FBQ0E7QUFDQSxTQUFLRCxRQUFMLEdBQWdCQSxZQUFZLElBQTVCO0FBQ0Q7QUFDRDs7Ozs7d0JBQ2lCO0FBQUUsYUFBTyxLQUFQO0FBQWU7O0FBRWxDOzs7O3dCQUNpQjtBQUFFLGFBQU8sS0FBUDtBQUFlOztBQUVsQzs7Ozt3QkFDa0I7QUFBRSxhQUFPLE1BQVA7QUFBZ0I7O0FBRXBDOzs7O3dCQUNvQjtBQUFFLGFBQU8sS0FBUDtBQUFlOzs7Ozs7QUFHdkM7Ozs7O0lBR2FDLGEsV0FBQUEsYTs7Ozs7Ozs7QUFDWDs7OztvQ0FJZ0I7QUFDZCxVQUFJQyxRQUFRLEVBQVo7QUFDQSxXQUFJLElBQUlDLE1BQVIsSUFBa0IsSUFBbEIsRUFBdUI7QUFDckIsWUFBSSxLQUFLQSxNQUFMLEtBQWdCLElBQXBCLEVBQTBCO0FBQ3hCRCxnQkFBTUUsSUFBTixDQUFXRCxTQUFTLEdBQVQsR0FBZSxLQUFLQSxNQUFMLENBQTFCO0FBQ0Q7QUFDRjtBQUNELFVBQUdELE1BQU1HLE1BQU4sR0FBZSxDQUFsQixFQUFvQjtBQUNsQixlQUFPLE1BQU1ILE1BQU1JLElBQU4sQ0FBVyxHQUFYLENBQWI7QUFDRDtBQUNELGFBQU8sRUFBUDtBQUNEOztBQUVEOzs7Ozs7OytCQUlXO0FBQ1QsVUFBSVAsU0FBUyxFQUFiO0FBQ0EsV0FBSSxJQUFJSSxNQUFSLElBQWtCLElBQWxCLEVBQXVCO0FBQ3JCLFlBQUksS0FBS0EsTUFBTCxLQUFnQixJQUFwQixFQUEwQjtBQUN4QkosaUJBQU9JLE1BQVAsSUFBaUIsS0FBS0EsTUFBTCxDQUFqQjtBQUNEO0FBQ0Y7QUFDRCxhQUFPSixNQUFQO0FBQ0QiLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QgdG8gdXNlIHdpdGggdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVlc3R7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcmVxdWVzdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBUaGUgdHlwZSBvZiBIVFRQIHJlcXVlc3QgdG8gcGVyZm9ybS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVyaSBUaGUgcmVsYXRpdmUgb2YgZnVsbCBwYXRoIHVyaSBvZiBhIHJlcXVlc3QgdG8gcGVyZm9ybS4gVGhpcyBzaG91bGQgbm90IGluY2x1ZGUgYW55IHF1ZXJ5IHBhcmFtZXRlcnMuXG4gICAqIEBwYXJhbSB7UmVxdWVzdFBhcmFtc30gW3BhcmFtc10gQWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIGluY2x1ZGUgd2l0aCB0aGUgcmVxdWVzdCBpbiBlaXRoZXIgcG9zdCBib2R5IG9yIHF1ZXJ5IHBhcmFtcy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrPW51bGxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcGVyZm9ybSBhZnRlciB0aGUgcmVxdWVzdCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgcGVyZm9ybWVkLlxuICAgKi9cbiAgY29uc3RydWN0b3IobWV0aG9kLCB1cmksIHBhcmFtcywgY2FsbGJhY2spe1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMudXJpID0gdXJpO1xuICAgIC8qKiBAdHlwZSB7UmVxdWVzdFBhcmFtc30gKi9cbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcyB8fCBuZXcgUmVxdWVzdFBhcmFtcygpO1xuICAgIC8qKiBAdHlwZSB7ZnVuY3Rpb258bnVsbH0gKi9cbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2sgfHwgbnVsbDtcbiAgfVxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgc3RhdGljIGdldCBHRVQoKSB7IHJldHVybiAnZ2V0JzsgfVxuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICBzdGF0aWMgZ2V0IFBVVCgpIHsgcmV0dXJuICdwdXQnOyB9XG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHN0YXRpYyBnZXQgUE9TVCgpIHsgcmV0dXJuICdwb3N0JzsgfVxuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICBzdGF0aWMgZ2V0IERFTEVURSgpIHsgcmV0dXJuICdwdXQnOyB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbnkgcXVlcnkgcGFyYW1ldGVycyB0byB1c2Ugd2l0aCBhIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0UGFyYW1ze1xuICAvKipcbiAgICogQ29udmVydCBwYXJhbXMgZm9yIHRoZSByZXF1ZXN0IHRvIGEgcXVlcnkgc3RyaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHBhcmFtZXRlcnMgaW4gdGhlIGZvcm1hdCBvZiAnPzxwYXJhbT49PHZhbHVlPicuXG4gICAqL1xuICB0b1F1ZXJ5U3RyaW5nKCkge1xuICAgIGxldCBwYWlycyA9IFtdO1xuICAgIGZvcihsZXQgbWVtYmVyIGluIHRoaXMpe1xuICAgICAgaWYgKHRoaXNbbWVtYmVyXSAhPSBudWxsKSB7XG4gICAgICAgIHBhaXJzLnB1c2gobWVtYmVyICsgJz0nICsgdGhpc1ttZW1iZXJdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYocGFpcnMubGVuZ3RoID4gMCl7XG4gICAgICByZXR1cm4gJz8nICsgcGFpcnMuam9pbignJicpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBwYXJhbXMgZm9yIHRoZSByZXF1ZXN0IHRvIGEgYW4gb2JqZWN0LlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IHRyaW1tZWQgZG93biBwYXJhbWV0ZXJzIG9iamVjdC5cbiAgICovXG4gIHRvT2JqZWN0KCkge1xuICAgIGxldCBwYXJhbXMgPSB7fTtcbiAgICBmb3IobGV0IG1lbWJlciBpbiB0aGlzKXtcbiAgICAgIGlmICh0aGlzW21lbWJlcl0gIT0gbnVsbCkge1xuICAgICAgICBwYXJhbXNbbWVtYmVyXSA9IHRoaXNbbWVtYmVyXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIl19